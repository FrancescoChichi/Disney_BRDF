{
    "name": "glTFAccessor",
    "type": "object",
    "description": "A typed view into a bufferView.  A bufferView contains raw binary data.  An accessor provides a typed view into a bufferView or a subset of a bufferView similar to how WebGL's `vertexAttribPointer()` defines an attribute in a buffer.",
    "base": "glTFChildOfRootProperty",
    "properties": {
        "bufferView": {
            "type": "glTFid<glTFBufferView>",
            "description": "The index of the bufferView.",
            "gltf_detailedDescription": "The index of the bufferView. When not defined, accessor must be initialized with zeros; `sparse` property or extensions could override zeros with actual values."
        },
        "byteOffset": {
            "type": "int",
            "description": "The offset relative to the start of the bufferView in bytes.",
            "minimum": 0,
            "default": 0,
            "gltf_detailedDescription": "The offset relative to the start of the bufferView in bytes.  This must be a multiple of the size of the component datatype.",
            "gltf_webgl": "`vertexAttribPointer()` offset parameter"
        },
        "componentType": {
            "description": "The datatype of components in the attribute.",
            "gltf_detailedDescription": "The datatype of components in the attribute.  All valid values correspond to WebGL enums.  The corresponding typed arrays are `Int8Array`, `Uint8Array`, `Int16Array`, `Uint16Array`, `Uint32Array`, and `Float32Array`, respectively.  5125 (UNSIGNED_INT) is only allowed when the accessor contains indices, i.e., the accessor is only referenced by `primitive.indices`.",
            "gltf_webgl": "`vertexAttribPointer()` type parameter",
            "type": "glTFAccessorComponentType",
            "is_enum": true
        },
        "normalized": {
            "type": "bool",
            "description": "Specifies whether integer data values should be normalized.",
            "default": false,
            "gltf_detailedDescription": "Specifies whether integer data values should be normalized (`true`) to [0, 1] (for unsigned types) or [-1, 1] (for signed types), or converted directly (`false`) when they are accessed. This property is defined only for accessors that contain vertex attributes or animation output data.",
            "gltf_webgl": "`vertexAttribPointer()` normalized parameter"
        },
        "count": {
            "type": "int",
            "description": "The number of attributes referenced by this accessor.",
            "minimum": 1,
            "gltf_detailedDescription": "The number of attributes referenced by this accessor, not to be confused with the number of bytes or number of components."
        },
        "type": {
            "description": "Specifies if the attribute is a scalar, vector, or matrix.",
            "type": "glTFAccessorType",
            "is_enum": true
        },
        "max": {
            "type": "vector<float>",
            "description": "Maximum value of each component in this attribute.",
            "minItems": 1,
            "maxItems": 16,
            "gltf_detailedDescription": "Maximum value of each component in this attribute.  Array elements must be treated as having the same data type as accessor's `componentType`. Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain max values of accessor data with sparse substitution applied."
        },
        "min": {
            "type": "vector<float>",
            "description": "Minimum value of each component in this attribute.",
            "minItems": 1,
            "maxItems": 16,
            "gltf_detailedDescription": "Minimum value of each component in this attribute.  Array elements must be treated as having the same data type as accessor's `componentType`. Both min and max arrays have the same length.  The length is determined by the value of the type property; it can be 1, 2, 3, 4, 9, or 16.\n\n`normalized` property has no effect on array values: they always correspond to the actual values stored in the buffer. When accessor is sparse, this property must contain min values of accessor data with sparse substitution applied."
        },
        "sparse": {
            "type": "glTFAccessorSparse*",
            "description": "Sparse storage of attributes that deviate from their initialization value."
        }
    },
    "enums": [
        {
            "name": "glTFAccessorComponentType",
            "description": "Values for glTFAccessor::componentType",
            "item": "int",
            "values": [
                {
                    "enum": 5120,
                    "label": "Byte"
                },
                {
                    "enum": 5121,
                    "label": "UnsignedByte"
                },
                {
                    "enum": 5122,
                    "label": "Short"
                },
                {
                    "enum": 5123,
                    "label": "UnsignedShort"
                },
                {
                    "enum": 5125,
                    "label": "UnsignedInt"
                },
                {
                    "enum": 5126,
                    "label": "Float"
                }
            ]
        },
        {
            "name": "glTFAccessorType",
            "description": "Values for glTFAccessor::type",
            "item": "string",
            "values": [
                {
                    "enum": "SCALAR",
                    "label": "Scalar",
                    "value": 0
                },
                {
                    "enum": "VEC2",
                    "label": "Vec2",
                    "value": 1
                },
                {
                    "enum": "VEC3",
                    "label": "Vec3",
                    "value": 2
                },
                {
                    "enum": "VEC4",
                    "label": "Vec4",
                    "value": 3
                },
                {
                    "enum": "MAT2",
                    "label": "Mat2",
                    "value": 4
                },
                {
                    "enum": "MAT3",
                    "label": "Mat3",
                    "value": 5
                },
                {
                    "enum": "MAT4",
                    "label": "Mat4",
                    "value": 6
                }
            ]
        }
    ],
    "dependencies": {
        "byteOffset": [ "bufferView" ]
    },
    "required": [ "componentType", "count", "type" ]
}
